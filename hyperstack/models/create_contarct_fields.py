# coding: utf-8

"""
    Infrahub-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperstack.models.discount_plan_fields import DiscountPlanFields
from typing import Optional, Set
from typing_extensions import Self

class CreateContarctFields(BaseModel):
    """
    CreateContarctFields
    """ # noqa: E501
    id: Optional[StrictInt] = None
    org_id: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    expiration_policy: Optional[StrictInt] = None
    discount_plans: Optional[List[DiscountPlanFields]] = None
    created_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "org_id", "description", "start_date", "end_date", "expiration_policy", "discount_plans", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateContarctFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in discount_plans (list)
        _items = []
        if self.discount_plans:
            for _item in self.discount_plans:
                if _item:
                    _items.append(_item.to_dict())
            _dict['discount_plans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateContarctFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "org_id": obj.get("org_id"),
            "description": obj.get("description"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "expiration_policy": obj.get("expiration_policy"),
            "discount_plans": [DiscountPlanFields.from_dict(_item) for _item in obj["discount_plans"]] if obj.get("discount_plans") is not None else None,
            "created_at": obj.get("created_at")
        })
        return _obj


