# coding: utf-8

"""
    Infrahub-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperstack.models.internal_environment_fields import InternalEnvironmentFields
from hyperstack.models.internal_instance_flavor_fields import InternalInstanceFlavorFields
from hyperstack.models.internal_instance_image_fields import InternalInstanceImageFields
from hyperstack.models.internal_instance_keypair_fields import InternalInstanceKeypairFields
from hyperstack.models.internal_security_rules_fields_for_instance import InternalSecurityRulesFieldsForInstance
from hyperstack.models.internal_volume_attachment_fields import InternalVolumeAttachmentFields
from typing import Optional, Set
from typing_extensions import Self

class InternalInstanceFields(BaseModel):
    """
    InternalInstanceFields
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    openstack_id: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    environment: Optional[InternalEnvironmentFields] = None
    image: Optional[InternalInstanceImageFields] = None
    flavor: Optional[InternalInstanceFlavorFields] = None
    keypair: Optional[InternalInstanceKeypairFields] = None
    volume_attachments: Optional[List[InternalVolumeAttachmentFields]] = None
    boot_source: Optional[StrictStr] = None
    power_state: Optional[StrictStr] = None
    vm_state: Optional[StrictStr] = None
    fixed_ip: Optional[StrictStr] = None
    floating_ip: Optional[StrictStr] = None
    floating_ip_status: Optional[StrictStr] = None
    user_data: Optional[StrictStr] = None
    security_rules: Optional[List[InternalSecurityRulesFieldsForInstance]] = None
    callback_url: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "name", "openstack_id", "status", "environment", "image", "flavor", "keypair", "volume_attachments", "boot_source", "power_state", "vm_state", "fixed_ip", "floating_ip", "floating_ip_status", "user_data", "security_rules", "callback_url", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InternalInstanceFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flavor
        if self.flavor:
            _dict['flavor'] = self.flavor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keypair
        if self.keypair:
            _dict['keypair'] = self.keypair.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volume_attachments (list)
        _items = []
        if self.volume_attachments:
            for _item in self.volume_attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volume_attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in security_rules (list)
        _items = []
        if self.security_rules:
            for _item in self.security_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['security_rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InternalInstanceFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "openstack_id": obj.get("openstack_id"),
            "status": obj.get("status"),
            "environment": InternalEnvironmentFields.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "image": InternalInstanceImageFields.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "flavor": InternalInstanceFlavorFields.from_dict(obj["flavor"]) if obj.get("flavor") is not None else None,
            "keypair": InternalInstanceKeypairFields.from_dict(obj["keypair"]) if obj.get("keypair") is not None else None,
            "volume_attachments": [InternalVolumeAttachmentFields.from_dict(_item) for _item in obj["volume_attachments"]] if obj.get("volume_attachments") is not None else None,
            "boot_source": obj.get("boot_source"),
            "power_state": obj.get("power_state"),
            "vm_state": obj.get("vm_state"),
            "fixed_ip": obj.get("fixed_ip"),
            "floating_ip": obj.get("floating_ip"),
            "floating_ip_status": obj.get("floating_ip_status"),
            "user_data": obj.get("user_data"),
            "security_rules": [InternalSecurityRulesFieldsForInstance.from_dict(_item) for _item in obj["security_rules"]] if obj.get("security_rules") is not None else None,
            "callback_url": obj.get("callback_url"),
            "created_at": obj.get("created_at")
        })
        return _obj


