# coding: utf-8

"""
    Infrahub-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from hyperstack.models.pricebook_resource_object_response import PricebookResourceObjectResponse
from typing import Optional, Set
from typing_extensions import Self

class InfrahubResourceObjectResponse(BaseModel):
    """
    InfrahubResourceObjectResponse
    """ # noqa: E501
    type: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    infrahub_id: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    host: Optional[StrictStr] = None
    resources: Optional[List[PricebookResourceObjectResponse]] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    actual_price: Optional[Union[StrictFloat, StrictInt]] = None
    host_price: Optional[Union[StrictFloat, StrictInt]] = None
    actual_host_price: Optional[Union[StrictFloat, StrictInt]] = None
    nexgen_price: Optional[Union[StrictFloat, StrictInt]] = None
    nexgen_actual_price: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["type", "name", "infrahub_id", "status", "host", "resources", "price", "actual_price", "host_price", "actual_host_price", "nexgen_price", "nexgen_actual_price"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InfrahubResourceObjectResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item in self.resources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InfrahubResourceObjectResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "infrahub_id": obj.get("infrahub_id"),
            "status": obj.get("status"),
            "host": obj.get("host"),
            "resources": [PricebookResourceObjectResponse.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "price": obj.get("price"),
            "actual_price": obj.get("actual_price"),
            "host_price": obj.get("host_price"),
            "actual_host_price": obj.get("actual_host_price"),
            "nexgen_price": obj.get("nexgen_price"),
            "nexgen_actual_price": obj.get("nexgen_actual_price")
        })
        return _obj


