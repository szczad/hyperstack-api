# coding: utf-8

"""
    Infrahub-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperstack.models.flavor_object_fields import FlavorObjectFields
from hyperstack.models.profile_object_fields import ProfileObjectFields
from typing import Optional, Set
from typing_extensions import Self

class CreateInstancesPayload(BaseModel):
    """
    CreateInstancesPayload
    """ # noqa: E501
    name: StrictStr
    environment_name: StrictStr
    image_name: Optional[StrictStr] = None
    volume_name: Optional[StrictStr] = None
    create_bootable_volume: Optional[StrictBool] = None
    flavor_name: Optional[StrictStr] = None
    flavor: Optional[FlavorObjectFields] = None
    key_name: StrictStr
    user_data: Optional[StrictStr] = None
    callback_url: Optional[StrictStr] = None
    assign_floating_ip: Optional[StrictBool] = None
    profile: Optional[ProfileObjectFields] = None
    count: StrictInt
    __properties: ClassVar[List[str]] = ["name", "environment_name", "image_name", "volume_name", "create_bootable_volume", "flavor_name", "flavor", "key_name", "user_data", "callback_url", "assign_floating_ip", "profile", "count"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInstancesPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flavor
        if self.flavor:
            _dict['flavor'] = self.flavor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInstancesPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "environment_name": obj.get("environment_name"),
            "image_name": obj.get("image_name"),
            "volume_name": obj.get("volume_name"),
            "create_bootable_volume": obj.get("create_bootable_volume"),
            "flavor_name": obj.get("flavor_name"),
            "flavor": FlavorObjectFields.from_dict(obj["flavor"]) if obj.get("flavor") is not None else None,
            "key_name": obj.get("key_name"),
            "user_data": obj.get("user_data"),
            "callback_url": obj.get("callback_url"),
            "assign_floating_ip": obj.get("assign_floating_ip"),
            "profile": ProfileObjectFields.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "count": obj.get("count")
        })
        return _obj


